// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetRequest struct {
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type GetReply struct {
	ConcurrentBuilds int32 `protobuf:"varint,1,opt,name=concurrent_builds,json=concurrentBuilds" json:"concurrent_builds,omitempty"`
}

func (m *GetReply) Reset()                    { *m = GetReply{} }
func (m *GetReply) String() string            { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()               {}
func (*GetReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *GetReply) GetConcurrentBuilds() int32 {
	if m != nil {
		return m.ConcurrentBuilds
	}
	return 0
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "pb.GetRequest")
	proto.RegisterType((*GetReply)(nil), "pb.GetReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Configuration service

type ConfigurationClient interface {
	// Get retrieves the server configuration, notably including the number of
	// maximum concurrent builds (for load balancing).
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
}

type configurationClient struct {
	cc *grpc.ClientConn
}

func NewConfigurationClient(cc *grpc.ClientConn) ConfigurationClient {
	return &configurationClient{cc}
}

func (c *configurationClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := grpc.Invoke(ctx, "/pb.Configuration/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Configuration service

type ConfigurationServer interface {
	// Get retrieves the server configuration, notably including the number of
	// maximum concurrent builds (for load balancing).
	Get(context.Context, *GetRequest) (*GetReply, error)
}

func RegisterConfigurationServer(s *grpc.Server, srv ConfigurationServer) {
	s.RegisterService(&_Configuration_serviceDesc, srv)
}

func _Configuration_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Configuration/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Configuration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Configuration",
	HandlerType: (*ConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Configuration_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}

func init() { proto.RegisterFile("config.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xe2, 0xe1, 0xe2,
	0x72, 0x4f, 0x2d, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0x32, 0xe7, 0xe2, 0x00, 0xf3,
	0x0a, 0x72, 0x2a, 0x85, 0xb4, 0xb9, 0x04, 0x93, 0xf3, 0xf3, 0x92, 0x4b, 0x8b, 0x8a, 0x52, 0xf3,
	0x4a, 0xe2, 0x93, 0x4a, 0x33, 0x73, 0x52, 0x8a, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x04,
	0x10, 0x12, 0x4e, 0x60, 0x71, 0x23, 0x33, 0x2e, 0x5e, 0x67, 0xb0, 0xd1, 0xa5, 0x45, 0x89, 0x25,
	0x99, 0xf9, 0x79, 0x42, 0xaa, 0x5c, 0xcc, 0xee, 0xa9, 0x25, 0x42, 0x7c, 0x7a, 0x05, 0x49, 0x7a,
	0x08, 0x0b, 0xa4, 0x78, 0xe0, 0xfc, 0x82, 0x9c, 0x4a, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x4b, 0x8c,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x65, 0x64, 0x8b, 0x54, 0x99, 0x00, 0x00, 0x00,
}
