// Code generated by protoc-gen-go. DO NOT EDIT.
// source: semaphore.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AcquireRequest struct {
}

func (m *AcquireRequest) Reset()                    { *m = AcquireRequest{} }
func (m *AcquireRequest) String() string            { return proto.CompactTextString(m) }
func (*AcquireRequest) ProtoMessage()               {}
func (*AcquireRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type AcquireReply struct {
	BuildId string `protobuf:"bytes,1,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
	// host:port tuple to Dial for subsequent requests.
	HostPort string `protobuf:"bytes,2,opt,name=host_port,json=hostPort" json:"host_port,omitempty"`
}

func (m *AcquireReply) Reset()                    { *m = AcquireReply{} }
func (m *AcquireReply) String() string            { return proto.CompactTextString(m) }
func (*AcquireReply) ProtoMessage()               {}
func (*AcquireReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *AcquireReply) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

func (m *AcquireReply) GetHostPort() string {
	if m != nil {
		return m.HostPort
	}
	return ""
}

type ReleaseRequest struct {
	BuildId string `protobuf:"bytes,1,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
}

func (m *ReleaseRequest) Reset()                    { *m = ReleaseRequest{} }
func (m *ReleaseRequest) String() string            { return proto.CompactTextString(m) }
func (*ReleaseRequest) ProtoMessage()               {}
func (*ReleaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ReleaseRequest) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

type ReleaseReply struct {
}

func (m *ReleaseReply) Reset()                    { *m = ReleaseReply{} }
func (m *ReleaseReply) String() string            { return proto.CompactTextString(m) }
func (*ReleaseReply) ProtoMessage()               {}
func (*ReleaseReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func init() {
	proto.RegisterType((*AcquireRequest)(nil), "pb.AcquireRequest")
	proto.RegisterType((*AcquireReply)(nil), "pb.AcquireReply")
	proto.RegisterType((*ReleaseRequest)(nil), "pb.ReleaseRequest")
	proto.RegisterType((*ReleaseReply)(nil), "pb.ReleaseReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Semaphore service

type SemaphoreClient interface {
	Acquire(ctx context.Context, in *AcquireRequest, opts ...grpc.CallOption) (Semaphore_AcquireClient, error)
	Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseReply, error)
}

type semaphoreClient struct {
	cc *grpc.ClientConn
}

func NewSemaphoreClient(cc *grpc.ClientConn) SemaphoreClient {
	return &semaphoreClient{cc}
}

func (c *semaphoreClient) Acquire(ctx context.Context, in *AcquireRequest, opts ...grpc.CallOption) (Semaphore_AcquireClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Semaphore_serviceDesc.Streams[0], c.cc, "/pb.Semaphore/Acquire", opts...)
	if err != nil {
		return nil, err
	}
	x := &semaphoreAcquireClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Semaphore_AcquireClient interface {
	Recv() (*AcquireReply, error)
	grpc.ClientStream
}

type semaphoreAcquireClient struct {
	grpc.ClientStream
}

func (x *semaphoreAcquireClient) Recv() (*AcquireReply, error) {
	m := new(AcquireReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *semaphoreClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseReply, error) {
	out := new(ReleaseReply)
	err := grpc.Invoke(ctx, "/pb.Semaphore/Release", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Semaphore service

type SemaphoreServer interface {
	Acquire(*AcquireRequest, Semaphore_AcquireServer) error
	Release(context.Context, *ReleaseRequest) (*ReleaseReply, error)
}

func RegisterSemaphoreServer(s *grpc.Server, srv SemaphoreServer) {
	s.RegisterService(&_Semaphore_serviceDesc, srv)
}

func _Semaphore_Acquire_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AcquireRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SemaphoreServer).Acquire(m, &semaphoreAcquireServer{stream})
}

type Semaphore_AcquireServer interface {
	Send(*AcquireReply) error
	grpc.ServerStream
}

type semaphoreAcquireServer struct {
	grpc.ServerStream
}

func (x *semaphoreAcquireServer) Send(m *AcquireReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Semaphore_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemaphoreServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Semaphore/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemaphoreServer).Release(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Semaphore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Semaphore",
	HandlerType: (*SemaphoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Release",
			Handler:    _Semaphore_Release_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Acquire",
			Handler:       _Semaphore_Acquire_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "semaphore.proto",
}

func init() { proto.RegisterFile("semaphore.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x4e, 0xcd, 0x4d,
	0x2c, 0xc8, 0xc8, 0x2f, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52,
	0x12, 0xe0, 0xe2, 0x73, 0x4c, 0x2e, 0x2c, 0xcd, 0x2c, 0x4a, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x51, 0x72, 0xe3, 0xe2, 0x81, 0x8b, 0x14, 0xe4, 0x54, 0x0a, 0x49, 0x72, 0x71, 0x24, 0x95,
	0x66, 0xe6, 0xa4, 0xc4, 0x67, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xb1, 0x83, 0xf9,
	0x9e, 0x29, 0x42, 0xd2, 0x5c, 0x9c, 0x19, 0xf9, 0xc5, 0x25, 0xf1, 0x05, 0xf9, 0x45, 0x25, 0x12,
	0x4c, 0x60, 0x39, 0x0e, 0x90, 0x40, 0x40, 0x7e, 0x51, 0x89, 0x92, 0x36, 0x17, 0x5f, 0x50, 0x6a,
	0x4e, 0x6a, 0x62, 0x31, 0xcc, 0x64, 0x3c, 0x26, 0x29, 0xf1, 0x71, 0xf1, 0xc0, 0x15, 0x17, 0xe4,
	0x54, 0x1a, 0x15, 0x73, 0x71, 0x06, 0xc3, 0x5c, 0x2b, 0x64, 0xcc, 0xc5, 0x0e, 0x75, 0x91, 0x90,
	0x90, 0x5e, 0x41, 0x92, 0x1e, 0xaa, 0x83, 0xa5, 0x04, 0x50, 0xc4, 0x0a, 0x72, 0x2a, 0x95, 0x18,
	0x0c, 0x18, 0x85, 0x0c, 0xb9, 0xd8, 0xa1, 0x26, 0x42, 0x34, 0xa1, 0xba, 0x05, 0xa2, 0x09, 0xd9,
	0x4a, 0x25, 0x86, 0x24, 0x36, 0x70, 0xb0, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x4e,
	0x49, 0x14, 0x29, 0x01, 0x00, 0x00,
}
